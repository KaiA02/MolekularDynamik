#ifndef PARTICLECONTAINER_H
#define PARTICLECONTAINER_H

#include <optional>

#include "../Particle.h"
#include <vector>

#include "BaseParticleContainer.h"
#include "../LinkedCell/Cell.h"



/**
 * @brief The ParticleContainer class
 * This class is a container for Particles. It contains a vector of Particles
 * and a 2D vector of pairings.
 */
class ParticleContainer : public BaseParticleContainer {
public:
  ParticleContainer();
 /**
  * @param particle: Particle that will be added to the vector
  */
  void addParticle(const Particle &particle) override;
  void setParticle(Particle p, int position) override;
  void resetParticles() override;
  std::vector<Particle> &getParticles() override;
  const std::vector<Particle> &getParticles() const override;
  std::vector<Cell> getCells();
  int size() const override;

  std::vector<Particle>::iterator begin() override;
  std::vector<Particle>::iterator end() override;
  std::vector<Particle>::const_iterator begin() const override;
  std::vector<Particle>::const_iterator end() const override;

  void handleLJFCalculation() override;

  /**
   * @brief adds a cuboid of particles to the vector particles
   * @param particleCube cuboid generated by the ParticleGenerator
   */
  void addMultipleParticles(std::vector<Particle> particleCube);

  /**
   * @brief adds a disk of particles to the vector particles
   * @param particleDisk disk generated by the ParticleGenerator
   */
  // void addDisk(std::vector<Particle> particleDisk);
};

#endif // PARTICLECONTAINER_H
