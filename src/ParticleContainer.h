#ifndef PARTICLECONTAINER_H
#define PARTICLECONTAINER_H

#include "Particle.h"
#include <vector>
#include "LinkedCell/Cell.h"

/**
 * @brief The BaseParticleContainer class
 * This class is a base container for Particles. It contains a vector of Particles
 * and provides basic operations for managing Particles.
 */
class BaseParticleContainer {
public:
    virtual ~BaseParticleContainer() = default;

    /**
     * @brief add a Particle to the vector
     * @param particle Particle to add
     */
    virtual void addParticle(const Particle &particle) = 0;

    /**
     * @brief replaces a particle in the vector particles at index position
     * @param p new Particle
     * @param position index in particles
     */
    virtual void setParticle(Particle p, int position) = 0;

    /**
     * @brief resets all particles in the container
     */
    virtual void resetParticles() = 0;

    /**
     * @brief gets all particles in the container
     * @return reference to vector of particles
     */
    virtual std::vector<Particle> &getParticles() = 0;
    virtual const std::vector<Particle> &getParticles() const = 0;

    /**
     * @brief gets the number of particles in the container
     * @return number of particles
     */
    virtual int size() const = 0;

   virtual std::vector<Particle>::iterator begin() = 0;
   virtual std::vector<Particle>::iterator end() = 0;
   virtual std::vector<Particle>::const_iterator begin() const = 0;
   virtual std::vector<Particle>::const_iterator end() const = 0;
   virtual void handleLJFCalculation() = 0;

protected:
 std::vector<Particle> particles;
};

/**
 * @brief The ParticleContainer class
 * This class is a container for Particles. It contains a vector of Particles
 * and a 2D vector of pairings.
 */
class ParticleContainer : public BaseParticleContainer {
public:
    ParticleContainer();

    void addParticle(const Particle &particle) override;
    void setParticle(Particle p, int position) override;
    void resetParticles() override;
    std::vector<Particle> &getParticles() override;
    const std::vector<Particle> &getParticles() const override;
    int size() const override;

   std::vector<Particle>::iterator begin() override;
   std::vector<Particle>::iterator end() override;
   std::vector<Particle>::const_iterator begin() const override;
   std::vector<Particle>::const_iterator end() const override;

   void handleLJFCalculation() override;


    /**
     * @brief adds a cuboid of particles to the vector particles
     * @param particleCube cuboid generated by the ParticleGenerator
     */
    void addCube(std::vector<Particle> particleCube);

    /**
     * @brief adds a disk of particles to the vector particles
     * @param particleDisk disk generated by the ParticleGenerator
     */
    void addDisk(std::vector<Particle> particleDisk);

};

/**
 * @brief The LCParticleContainer class
 * This class is a container for Particles using the linked cell algorithm.
 */
class LCParticleContainer : public ParticleContainer {
public:
 //input CellSize in x,y,z and Strategy for handling particles out of border
 //allocates Particle to right cell and resets the forces to zero
 void realocateParticles(int handle_out_of_border);
 std::vector<Particle> getParticleInNeighbourhood(Cell c);
 Cell* getCellById(std::array<int, 3> id);
 //input: Domain Size in x,y,z and r_cutoff
 void generateCells(int size_x, int size_y, int size_z, double r_cutoff);
 //handles LJFCalcualtion for all Cells;
 void handleLJFCalculation() override;

 void addParticle(Particle p);

private:
 std::vector<Cell> cells;
 std::array<double, 3> cell_size;
};

#endif // PARTICLECONTAINER_H
