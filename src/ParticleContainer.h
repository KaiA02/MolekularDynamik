
#ifndef PARTICLECONTAINER_H
#define PARTICLECONTAINER_H

#include "Particle.h"
#include <vector>
/**
 * @brief The ParticleContainer class
 * This class is a container for Particles. It contains a vector of Particles
 * and a 2D vector of pairings.
 */
class ParticleContainer {
public:
  ParticleContainer();
  /**
   * @brief add a Particle to the vector
   * @param Particle particle
   */
  void addParticle(const Particle &particle);

  /**
  @brief add a Pairing to the 2d-vector pairings
  @param index1: index of the first Particle in particles index2: index of the
  second Particle in particles
   */
  void addPairing(int particleIndex1, int particleIndex2);
  const std::vector<Particle> &getParticles() const;
  int size() const;

  std::vector<Particle>::iterator begin();
  std::vector<Particle>::iterator end();
  std::vector<Particle>::const_iterator begin() const;
  std::vector<Particle>::const_iterator end() const;

  /**
   * @brief adds a cuboid of particles to the vector particles
   * @param particleCube cuboid generated by the ParticleGenerator
   */
  void addCube(std::vector<Particle> particleCube);

  /**
   * @brief replaces a particle in the vector particles at index position
   * @param p new Particle
   * @param position index in particles
   */
  void setParticle(Particle p, int position);

private:
  std::vector<Particle> particles;

  // TODO: integrate pairings into calculations when number of particles gets
  // too big (maybe use a force threshold to determine which particles are close
  // enough to interact with each other)
  std::vector<std::pair<int, int>> pairings;
};

#endif // PARTICLECONTAINER_H
